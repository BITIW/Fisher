!function(){"use strict";const e=1639578523827,t=["/service-worker-index.html","/phishing__/base-c7ea6308.svg","/phishing__/error404.png","/phishing__/favicon.ico","/phishing__/fonts/Roboto-VK-Bold.woff","/phishing__/fonts/Roboto-VK-Bold.woff2","/phishing__/fonts/Roboto-VK-Medium.woff","/phishing__/fonts/Roboto-VK-Medium.woff2","/phishing__/fonts/Roboto-VK-Normal.woff","/phishing__/fonts/Roboto-VK-Normal.woff2","/phishing__/global.css","/phishing__/icon.png","/phishing__/logo-192.png","/phishing__/logo-512.png","/phishing__/logo.svg","/phishing__/manifest.json","/phishing__/maskable.png"],r=["/client/client.112c8dd7.js","/client/inject_styles.5607aec6.js","/client/index.3c4e89d9.js","/client/auth.b2016e21.js","/client/auth-constants.6e91b4b3.js","/client/otp.ecabf212.js"];try{self["workbox:core:5.1.4"]&&_()}catch(e){}const a=(()=>{"__WB_DISABLE_DEV_LOGS"in self||(self.__WB_DISABLE_DEV_LOGS=!1);let e=!1;const t={debug:"#7f8c8d",log:"#2ecc71",warn:"#f39c12",error:"#c0392b",groupCollapsed:"#3498db",groupEnd:null},r=function(r,a){if(self.__WB_DISABLE_DEV_LOGS)return;if("groupCollapsed"===r&&/^((?!chrome|android).)*safari/i.test(navigator.userAgent))return void console[r](...a);const n=e?[]:["%cworkbox",[`background: ${t[r]}`,"border-radius: 0.5em","color: white","font-weight: bold","padding: 2px 0.5em"].join(";")];console[r](...n,...a),"groupCollapsed"===r&&(e=!0),"groupEnd"===r&&(e=!1)},a={},n=Object.keys(t);for(const e of n){const t=e;a[t]=(...e)=>{r(t,e)}}return a})(),n={"invalid-value":({paramName:e,validValueDescription:t,value:r})=>{if(!e||!t)throw new Error("Unexpected input to 'invalid-value' error.");return`The '${e}' parameter was given a value with an unexpected value. ${t} Received a value of ${JSON.stringify(r)}.`},"not-an-array":({moduleName:e,className:t,funcName:r,paramName:a})=>{if(!(e&&t&&r&&a))throw new Error("Unexpected input to 'not-an-array' error.");return`The parameter '${a}' passed into '${e}.${t}.${r}()' must be an array.`},"incorrect-type":({expectedType:e,paramName:t,moduleName:r,className:a,funcName:n})=>{if(!(e&&t&&r&&n))throw new Error("Unexpected input to 'incorrect-type' error.");return`The parameter '${t}' passed into '${r}.${a?a+".":""}${n}()' must be of type ${e}.`},"incorrect-class":({expectedClass:e,paramName:t,moduleName:r,className:a,funcName:n,isReturnValueProblem:s})=>{if(!e||!r||!n)throw new Error("Unexpected input to 'incorrect-class' error.");return s?`The return value from '${r}.${a?a+".":""}${n}()' must be an instance of class ${e.name}.`:`The parameter '${t}' passed into '${r}.${a?a+".":""}${n}()' must be an instance of class ${e.name}.`},"missing-a-method":({expectedMethod:e,paramName:t,moduleName:r,className:a,funcName:n})=>{if(!(e&&t&&r&&a&&n))throw new Error("Unexpected input to 'missing-a-method' error.");return`${r}.${a}.${n}() expected the '${t}' parameter to expose a '${e}' method.`},"add-to-cache-list-unexpected-type":({entry:e})=>`An unexpected entry was passed to 'workbox-precaching.PrecacheController.addToCacheList()' The entry '${JSON.stringify(e)}' isn't supported. You must supply an array of strings with one or more characters, objects with a url property or Request objects.`,"add-to-cache-list-conflicting-entries":({firstEntry:e,secondEntry:t})=>{if(!e||!t)throw new Error("Unexpected input to 'add-to-cache-list-duplicate-entries' error.");return`Two of the entries passed to 'workbox-precaching.PrecacheController.addToCacheList()' had the URL ${e._entryId} but different revision details. Workbox is unable to cache and version the asset correctly. Please remove one of the entries.`},"plugin-error-request-will-fetch":({thrownError:e})=>{if(!e)throw new Error("Unexpected input to 'plugin-error-request-will-fetch', error.");return`An error was thrown by a plugins 'requestWillFetch()' method. The thrown error message was: '${e.message}'.`},"invalid-cache-name":({cacheNameId:e,value:t})=>{if(!e)throw new Error("Expected a 'cacheNameId' for error 'invalid-cache-name'");return`You must provide a name containing at least one character for setCacheDetails({${e}: '...'}). Received a value of '${JSON.stringify(t)}'`},"unregister-route-but-not-found-with-method":({method:e})=>{if(!e)throw new Error("Unexpected input to 'unregister-route-but-not-found-with-method' error.");return`The route you're trying to unregister was not  previously registered for the method type '${e}'.`},"unregister-route-route-not-registered":()=>"The route you're trying to unregister was not previously registered.","queue-replay-failed":({name:e})=>`Replaying the background sync queue '${e}' failed.`,"duplicate-queue-name":({name:e})=>`The Queue name '${e}' is already being used. All instances of backgroundSync.Queue must be given unique names.`,"expired-test-without-max-age":({methodName:e,paramName:t})=>`The '${e}()' method can only be used when the '${t}' is used in the constructor.`,"unsupported-route-type":({moduleName:e,className:t,funcName:r,paramName:a})=>`The supplied '${a}' parameter was an unsupported type. Please check the docs for ${e}.${t}.${r} for valid input types.`,"not-array-of-class":({value:e,expectedClass:t,moduleName:r,className:a,funcName:n,paramName:s})=>`The supplied '${s}' parameter must be an array of '${t}' objects. Received '${JSON.stringify(e)},'. Please check the call to ${r}.${a}.${n}() to fix the issue.`,"max-entries-or-age-required":({moduleName:e,className:t,funcName:r})=>`You must define either config.maxEntries or config.maxAgeSecondsin ${e}.${t}.${r}`,"statuses-or-headers-required":({moduleName:e,className:t,funcName:r})=>`You must define either config.statuses or config.headersin ${e}.${t}.${r}`,"invalid-string":({moduleName:e,funcName:t,paramName:r})=>{if(!r||!e||!t)throw new Error("Unexpected input to 'invalid-string' error.");return`When using strings, the '${r}' parameter must start with 'http' (for cross-origin matches) or '/' (for same-origin matches). Please see the docs for ${e}.${t}() for more info.`},"channel-name-required":()=>"You must provide a channelName to construct a BroadcastCacheUpdate instance.","invalid-responses-are-same-args":()=>"The arguments passed into responsesAreSame() appear to be invalid. Please ensure valid Responses are used.","expire-custom-caches-only":()=>"You must provide a 'cacheName' property when using the expiration plugin with a runtime caching strategy.","unit-must-be-bytes":({normalizedRangeHeader:e})=>{if(!e)throw new Error("Unexpected input to 'unit-must-be-bytes' error.");return`The 'unit' portion of the Range header must be set to 'bytes'. The Range header provided was "${e}"`},"single-range-only":({normalizedRangeHeader:e})=>{if(!e)throw new Error("Unexpected input to 'single-range-only' error.");return`Multiple ranges are not supported. Please use a  single start value, and optional end value. The Range header provided was "${e}"`},"invalid-range-values":({normalizedRangeHeader:e})=>{if(!e)throw new Error("Unexpected input to 'invalid-range-values' error.");return`The Range header is missing both start and end values. At least one of those values is needed. The Range header provided was "${e}"`},"no-range-header":()=>"No Range header was found in the Request provided.","range-not-satisfiable":({size:e,start:t,end:r})=>`The start (${t}) and end (${r}) values in the Range are not satisfiable by the cached response, which is ${e} bytes.`,"attempt-to-cache-non-get-request":({url:e,method:t})=>`Unable to cache '${e}' because it is a '${t}' request and only 'GET' requests can be cached.`,"cache-put-with-no-response":({url:e})=>`There was an attempt to cache '${e}' but the response was not defined.`,"no-response":({url:e,error:t})=>{let r=`The strategy could not generate a response for '${e}'.`;return t&&(r+=` The underlying error is ${t}.`),r},"bad-precaching-response":({url:e,status:t})=>`The precaching request for '${e}' failed with an HTTP status of ${t}.`,"non-precached-url":({url:e})=>`createHandlerBoundToURL('${e}') was called, but that URL is not precached. Please pass in a URL that is precached instead.`,"add-to-cache-list-conflicting-integrities":({url:e})=>`Two of the entries passed to 'workbox-precaching.PrecacheController.addToCacheList()' had the URL ${e} with different integrity values. Please remove one of them.`,"missing-precache-entry":({cacheName:e,url:t})=>`Unable to find a precached response in ${e} for ${t}.`},s=(e,t={})=>{const r=n[e];if(!r)throw new Error(`Unable to find message for code '${e}'.`);return r(t)};class o extends Error{constructor(e,t){super(s(e,t)),this.name=e,this.details=t}}const i=(e,t)=>{if(!Array.isArray(e))throw new o("not-an-array",t)},c=(e,t,r)=>{if(!(e instanceof t))throw r.expectedClass=t,new o("incorrect-class",r)},u=new Set,h={googleAnalytics:"googleAnalytics",precache:"precache-v2",prefix:"workbox",runtime:"runtime",suffix:"undefined"!=typeof registration?registration.scope:""},l=e=>[h.prefix,e,h.suffix].filter((e=>e&&e.length>0)).join("-"),d=e=>e||l(h.precache);const p=e=>new URL(String(e),location.href).href.replace(new RegExp(`^${location.origin}`),""),m=(e,t)=>e.filter((e=>t in e)),f=async({request:e,mode:t,plugins:r=[]})=>{const a=m(r,"cacheKeyWillBeUsed");let n=e;for(const e of a)n=await e.cacheKeyWillBeUsed.call(e,{mode:t,request:n}),"string"==typeof n&&(n=new Request(n)),c(n,Request,{moduleName:"Plugin",funcName:"cacheKeyWillBeUsed",isReturnValueProblem:!0});return n},g=async({cacheName:e,request:t,event:r,matchOptions:n,plugins:s=[]})=>{const o=await self.caches.open(e),i=await f({plugins:s,request:t,mode:"read"});let u=await o.match(i,n);u?a.debug(`Found a cached response in '${e}'.`):a.debug(`No cached response found in '${e}'.`);for(const t of s)if("cachedResponseWillBeUsed"in t){const a=t.cachedResponseWillBeUsed;u=await a.call(t,{cacheName:e,event:r,matchOptions:n,cachedResponse:u,request:i}),u&&c(u,Response,{moduleName:"Plugin",funcName:"cachedResponseWillBeUsed",isReturnValueProblem:!0})}return u},w=async({cacheName:e,request:t,response:r,event:n,plugins:s=[],matchOptions:i})=>{if(t.method&&"GET"!==t.method)throw new o("attempt-to-cache-non-get-request",{url:p(t.url),method:t.method});const h=await f({plugins:s,request:t,mode:"write"});if(!r)throw a.error(`Cannot cache non-existent response for '${p(h.url)}'.`),new o("cache-put-with-no-response",{url:p(h.url)});const l=await(async({request:e,response:t,event:r,plugins:n=[]})=>{let s=t,o=!1;for(const t of n)if("cacheWillUpdate"in t){o=!0;const a=t.cacheWillUpdate;if(s=await a.call(t,{request:e,response:s,event:r}),s&&c(s,Response,{moduleName:"Plugin",funcName:"cacheWillUpdate",isReturnValueProblem:!0}),!s)break}return o||(s&&200!==s.status&&(0===s.status?a.warn(`The response for '${e.url}' is an opaque response. The caching strategy that you're using will not cache opaque responses by default.`):a.debug(`The response for '${e.url}' returned a status code of '${t.status}' and won't be cached as a result.`)),s=s&&200===s.status?s:void 0),s||null})({event:n,plugins:s,response:r,request:h});if(!l)return void a.debug(`Response '${p(h.url)}' will not be cached.`,l);const d=await self.caches.open(e),w=m(s,"cacheDidUpdate"),y=w.length>0?await g({cacheName:e,matchOptions:i,request:h}):null;a.debug(`Updating the '${e}' cache with a new Response for ${p(h.url)}.`);try{await d.put(h,l)}catch(e){throw"QuotaExceededError"===e.name&&await async function(){a.log(`About to run ${u.size} callbacks to clean up caches.`);for(const e of u)await e(),a.log(e,"is complete.");a.log("Finished running callbacks.")}(),e}for(const t of w)await t.cacheDidUpdate.call(t,{cacheName:e,event:n,oldResponse:y,newResponse:l,request:h})};let y;const b={readonly:["get","count","getKey","getAll","getAllKeys"],readwrite:["add","put","clear","delete"]};for(const[e,t]of Object.entries(b))for(const e of t);const N=async({request:e,fetchOptions:t,event:r,plugins:n=[]})=>{if("string"==typeof e&&(e=new Request(e)),r instanceof FetchEvent&&r.preloadResponse){const t=await r.preloadResponse;if(t)return a.log(`Using a preloaded navigation response for '${p(e.url)}'`),t}c(e,Request,{paramName:"request",expectedClass:Request,moduleName:"workbox-core",className:"fetchWrapper",funcName:"wrappedFetch"});const s=m(n,"fetchDidFail"),i=s.length>0?e.clone():null;try{for(const t of n)if("requestWillFetch"in t){const a=t.requestWillFetch,n=e.clone();(e=await a.call(t,{request:n,event:r}))&&c(e,Request,{moduleName:"Plugin",funcName:"cachedResponseWillBeUsed",isReturnValueProblem:!0})}}catch(e){throw new o("plugin-error-request-will-fetch",{thrownError:e})}const u=e.clone();try{let s;s="navigate"===e.mode?await fetch(e):await fetch(e,t),a.debug(`Network request for '${p(e.url)}' returned a response with status '${s.status}'.`);for(const e of n)"fetchDidSucceed"in e&&(s=await e.fetchDidSucceed.call(e,{event:r,request:u,response:s}),s&&c(s,Response,{moduleName:"Plugin",funcName:"fetchDidSucceed",isReturnValueProblem:!0}));return s}catch(t){a.error(`Network request for '${p(e.url)}' threw an error.`,t);for(const e of s)await e.fetchDidFail.call(e,{error:t,event:r,originalRequest:i.clone(),request:u.clone()});throw t}};async function $(e,t){const r=e.clone(),a={headers:new Headers(r.headers),status:r.status,statusText:r.statusText},n=t?t(a):a,s=function(){if(void 0===y){const e=new Response("");if("body"in e)try{new Response(e.body),y=!0}catch(e){y=!1}y=!1}return y}()?r.body:await r.blob();return new Response(s,n)}try{self["workbox:precaching:5.1.4"]&&_()}catch(e){}const v=[],x={get:()=>v,add(e){v.push(...e)}};function R(e){if(!e)throw new o("add-to-cache-list-unexpected-type",{entry:e});if("string"==typeof e){const t=new URL(e,location.href);return{cacheKey:t.href,url:t.href}}const{revision:t,url:r}=e;if(!r)throw new o("add-to-cache-list-unexpected-type",{entry:e});if(!t){const e=new URL(r,location.href);return{cacheKey:e.href,url:e.href}}const a=new URL(r,location.href),n=new URL(r,location.href);return a.searchParams.set("__WB_REVISION__",t),{cacheKey:a.href,url:n.href}}function E(e){const t=e.length;t>0&&(a.groupCollapsed(`During precaching cleanup, ${t} cached request${1===t?" was":"s were"} deleted.`),((e,t)=>{a.groupCollapsed(e);for(const e of t)a.log(e);a.groupEnd()})("Deleted Cache Requests",e),a.groupEnd())}function T(e,t){if(0!==t.length){a.groupCollapsed(e);for(const e of t)a.log(e);a.groupEnd()}}class q{constructor(e){this._cacheName=d(e),this._urlsToCacheKeys=new Map,this._urlsToCacheModes=new Map,this._cacheKeysToIntegrities=new Map}addToCacheList(e){i(e,{moduleName:"workbox-precaching",className:"PrecacheController",funcName:"addToCacheList",paramName:"entries"});const t=[];for(const r of e){"string"==typeof r?t.push(r):r&&void 0===r.revision&&t.push(r.url);const{cacheKey:e,url:n}=R(r),s="string"!=typeof r&&r.revision?"reload":"default";if(this._urlsToCacheKeys.has(n)&&this._urlsToCacheKeys.get(n)!==e)throw new o("add-to-cache-list-conflicting-entries",{firstEntry:this._urlsToCacheKeys.get(n),secondEntry:e});if("string"!=typeof r&&r.integrity){if(this._cacheKeysToIntegrities.has(e)&&this._cacheKeysToIntegrities.get(e)!==r.integrity)throw new o("add-to-cache-list-conflicting-integrities",{url:n});this._cacheKeysToIntegrities.set(e,r.integrity)}if(this._urlsToCacheKeys.set(n,e),this._urlsToCacheModes.set(n,s),t.length>0){const e=`Workbox is precaching URLs without revision info: ${t.join(", ")}\nThis is generally NOT safe. Learn more at https://bit.ly/wb-precache`;a.warn(e)}}}async install({event:e,plugins:t}={}){t&&i(t,{moduleName:"workbox-precaching",className:"PrecacheController",funcName:"install",paramName:"plugins"});const r=[],n=[],s=await self.caches.open(this._cacheName),o=await s.keys(),c=new Set(o.map((e=>e.url)));for(const[e,t]of this._urlsToCacheKeys)c.has(t)?n.push(e):r.push({cacheKey:t,url:e});const u=r.map((({cacheKey:r,url:a})=>{const n=this._cacheKeysToIntegrities.get(r),s=this._urlsToCacheModes.get(a);return this._addURLToCache({cacheKey:r,cacheMode:s,event:e,integrity:n,plugins:t,url:a})}));await Promise.all(u);const h=r.map((e=>e.url));return function(e,t){const r=e.length,n=t.length;if(r||n){let s=`Precaching ${r} file${1===r?"":"s"}.`;n>0&&(s+=` ${n} file${1===n?" is":"s are"} already cached.`),a.groupCollapsed(s),T("View newly precached URLs.",e),T("View previously precached URLs.",t),a.groupEnd()}}(h,n),{updatedURLs:h,notUpdatedURLs:n}}async activate(){const e=await self.caches.open(this._cacheName),t=await e.keys(),r=new Set(this._urlsToCacheKeys.values()),a=[];for(const n of t)r.has(n.url)||(await e.delete(n),a.push(n.url));return E(a),{deletedURLs:a}}async _addURLToCache({cacheKey:e,url:t,cacheMode:r,event:a,plugins:n,integrity:s}){const i=new Request(t,{integrity:s,cache:r,credentials:"same-origin"});let c,u=await N({event:a,plugins:n,request:i});for(const e of n||[])"cacheWillUpdate"in e&&(c=e);if(!(c?await c.cacheWillUpdate({event:a,request:i,response:u}):u.status<400))throw new o("bad-precaching-response",{url:t,status:u.status});u.redirected&&(u=await $(u)),await w({event:a,plugins:n,response:u,request:e===t?i:new Request(e),cacheName:this._cacheName,matchOptions:{ignoreSearch:!0}})}getURLsToCacheKeys(){return this._urlsToCacheKeys}getCachedURLs(){return[...this._urlsToCacheKeys.keys()]}getCacheKeyForURL(e){const t=new URL(e,location.href);return this._urlsToCacheKeys.get(t.href)}async matchPrecache(e){const t=e instanceof Request?e.url:e,r=this.getCacheKeyForURL(t);if(r){return(await self.caches.open(this._cacheName)).match(r)}}createHandler(e=!0){return async({request:t})=>{try{const e=await this.matchPrecache(t);if(e)return e;throw new o("missing-precache-entry",{cacheName:this._cacheName,url:t instanceof Request?t.url:t})}catch(r){if(e)return a.debug("Unable to respond with precached response. Falling back to network.",r),fetch(t);throw r}}}createHandlerBoundToURL(e,t=!0){if(!this.getCacheKeyForURL(e))throw new o("non-precached-url",{url:e});const r=this.createHandler(t),a=new Request(e);return()=>r({request:a})}}let U;const k=()=>(U||(U=new q),U);const C=(e,t)=>{const r=k().getURLsToCacheKeys();for(const a of function*(e,{ignoreURLParametersMatching:t,directoryIndex:r,cleanURLs:a,urlManipulation:n}={}){const s=new URL(e,location.href);s.hash="",yield s.href;const o=function(e,t=[]){for(const r of[...e.searchParams.keys()])t.some((e=>e.test(r)))&&e.searchParams.delete(r);return e}(s,t);if(yield o.href,r&&o.pathname.endsWith("/")){const e=new URL(o.href);e.pathname+=r,yield e.href}if(a){const e=new URL(o.href);e.pathname+=".html",yield e.href}if(n){const e=n({url:s});for(const t of e)yield t.href}}(e,t)){const e=r.get(a);if(e)return e}};let L=!1;function S(e){L||((({ignoreURLParametersMatching:e=[/^utm_/],directoryIndex:t="index.html",cleanURLs:r=!0,urlManipulation:n}={})=>{const s=d();self.addEventListener("fetch",(o=>{const i=C(o.request.url,{cleanURLs:r,directoryIndex:t,ignoreURLParametersMatching:e,urlManipulation:n});if(!i)return void a.debug("Precaching did not find a match for "+p(o.request.url));let c=self.caches.open(s).then((e=>e.match(i))).then((e=>e||(a.warn(`The precached response for ${p(i)} in ${s} was not found. Falling back to the network instead.`),fetch(i))));c=c.then((e=>(a.groupCollapsed("Precaching is responding to: "+p(o.request.url)),a.log(`Serving the precached url: ${i}`),a.groupCollapsed("View request details here."),a.log(o.request),a.groupEnd(),a.groupCollapsed("View response details here."),a.log(e),a.groupEnd(),a.groupEnd(),e))),o.respondWith(c)}))})(e),L=!0)}const P=e=>{const t=k(),r=x.get();e.waitUntil(t.install({event:e,plugins:r}).catch((e=>{throw a.error("Service worker installation failed. It will be retried automatically during the next navigation."),e})))},A=e=>{const t=k();e.waitUntil(t.activate())};try{self["workbox:core:6.0.2"]&&_()}catch(e){}const D={"invalid-value":({paramName:e,validValueDescription:t,value:r})=>{if(!e||!t)throw new Error("Unexpected input to 'invalid-value' error.");return`The '${e}' parameter was given a value with an unexpected value. ${t} Received a value of ${JSON.stringify(r)}.`},"not-an-array":({moduleName:e,className:t,funcName:r,paramName:a})=>{if(!(e&&t&&r&&a))throw new Error("Unexpected input to 'not-an-array' error.");return`The parameter '${a}' passed into '${e}.${t}.${r}()' must be an array.`},"incorrect-type":({expectedType:e,paramName:t,moduleName:r,className:a,funcName:n})=>{if(!(e&&t&&r&&n))throw new Error("Unexpected input to 'incorrect-type' error.");return`The parameter '${t}' passed into '${r}.${a?a+".":""}${n}()' must be of type ${e}.`},"incorrect-class":({expectedClass:e,paramName:t,moduleName:r,className:a,funcName:n,isReturnValueProblem:s})=>{if(!e||!r||!n)throw new Error("Unexpected input to 'incorrect-class' error.");return s?`The return value from '${r}.${a?a+".":""}${n}()' must be an instance of class ${e.name}.`:`The parameter '${t}' passed into '${r}.${a?a+".":""}${n}()' must be an instance of class ${e.name}.`},"missing-a-method":({expectedMethod:e,paramName:t,moduleName:r,className:a,funcName:n})=>{if(!(e&&t&&r&&a&&n))throw new Error("Unexpected input to 'missing-a-method' error.");return`${r}.${a}.${n}() expected the '${t}' parameter to expose a '${e}' method.`},"add-to-cache-list-unexpected-type":({entry:e})=>`An unexpected entry was passed to 'workbox-precaching.PrecacheController.addToCacheList()' The entry '${JSON.stringify(e)}' isn't supported. You must supply an array of strings with one or more characters, objects with a url property or Request objects.`,"add-to-cache-list-conflicting-entries":({firstEntry:e,secondEntry:t})=>{if(!e||!t)throw new Error("Unexpected input to 'add-to-cache-list-duplicate-entries' error.");return`Two of the entries passed to 'workbox-precaching.PrecacheController.addToCacheList()' had the URL ${e._entryId} but different revision details. Workbox is unable to cache and version the asset correctly. Please remove one of the entries.`},"plugin-error-request-will-fetch":({thrownError:e})=>{if(!e)throw new Error("Unexpected input to 'plugin-error-request-will-fetch', error.");return`An error was thrown by a plugins 'requestWillFetch()' method. The thrown error message was: '${e.message}'.`},"invalid-cache-name":({cacheNameId:e,value:t})=>{if(!e)throw new Error("Expected a 'cacheNameId' for error 'invalid-cache-name'");return`You must provide a name containing at least one character for setCacheDetails({${e}: '...'}). Received a value of '${JSON.stringify(t)}'`},"unregister-route-but-not-found-with-method":({method:e})=>{if(!e)throw new Error("Unexpected input to 'unregister-route-but-not-found-with-method' error.");return`The route you're trying to unregister was not  previously registered for the method type '${e}'.`},"unregister-route-route-not-registered":()=>"The route you're trying to unregister was not previously registered.","queue-replay-failed":({name:e})=>`Replaying the background sync queue '${e}' failed.`,"duplicate-queue-name":({name:e})=>`The Queue name '${e}' is already being used. All instances of backgroundSync.Queue must be given unique names.`,"expired-test-without-max-age":({methodName:e,paramName:t})=>`The '${e}()' method can only be used when the '${t}' is used in the constructor.`,"unsupported-route-type":({moduleName:e,className:t,funcName:r,paramName:a})=>`The supplied '${a}' parameter was an unsupported type. Please check the docs for ${e}.${t}.${r} for valid input types.`,"not-array-of-class":({value:e,expectedClass:t,moduleName:r,className:a,funcName:n,paramName:s})=>`The supplied '${s}' parameter must be an array of '${t}' objects. Received '${JSON.stringify(e)},'. Please check the call to ${r}.${a}.${n}() to fix the issue.`,"max-entries-or-age-required":({moduleName:e,className:t,funcName:r})=>`You must define either config.maxEntries or config.maxAgeSecondsin ${e}.${t}.${r}`,"statuses-or-headers-required":({moduleName:e,className:t,funcName:r})=>`You must define either config.statuses or config.headersin ${e}.${t}.${r}`,"invalid-string":({moduleName:e,funcName:t,paramName:r})=>{if(!r||!e||!t)throw new Error("Unexpected input to 'invalid-string' error.");return`When using strings, the '${r}' parameter must start with 'http' (for cross-origin matches) or '/' (for same-origin matches). Please see the docs for ${e}.${t}() for more info.`},"channel-name-required":()=>"You must provide a channelName to construct a BroadcastCacheUpdate instance.","invalid-responses-are-same-args":()=>"The arguments passed into responsesAreSame() appear to be invalid. Please ensure valid Responses are used.","expire-custom-caches-only":()=>"You must provide a 'cacheName' property when using the expiration plugin with a runtime caching strategy.","unit-must-be-bytes":({normalizedRangeHeader:e})=>{if(!e)throw new Error("Unexpected input to 'unit-must-be-bytes' error.");return`The 'unit' portion of the Range header must be set to 'bytes'. The Range header provided was "${e}"`},"single-range-only":({normalizedRangeHeader:e})=>{if(!e)throw new Error("Unexpected input to 'single-range-only' error.");return`Multiple ranges are not supported. Please use a  single start value, and optional end value. The Range header provided was "${e}"`},"invalid-range-values":({normalizedRangeHeader:e})=>{if(!e)throw new Error("Unexpected input to 'invalid-range-values' error.");return`The Range header is missing both start and end values. At least one of those values is needed. The Range header provided was "${e}"`},"no-range-header":()=>"No Range header was found in the Request provided.","range-not-satisfiable":({size:e,start:t,end:r})=>`The start (${t}) and end (${r}) values in the Range are not satisfiable by the cached response, which is ${e} bytes.`,"attempt-to-cache-non-get-request":({url:e,method:t})=>`Unable to cache '${e}' because it is a '${t}' request and only 'GET' requests can be cached.`,"cache-put-with-no-response":({url:e})=>`There was an attempt to cache '${e}' but the response was not defined.`,"no-response":({url:e,error:t})=>{let r=`The strategy could not generate a response for '${e}'.`;return t&&(r+=` The underlying error is ${t}.`),r},"bad-precaching-response":({url:e,status:t})=>`The precaching request for '${e}' failed`+(t?` with an HTTP status of ${t}.`:"."),"non-precached-url":({url:e})=>`createHandlerBoundToURL('${e}') was called, but that URL is not precached. Please pass in a URL that is precached instead.`,"add-to-cache-list-conflicting-integrities":({url:e})=>`Two of the entries passed to 'workbox-precaching.PrecacheController.addToCacheList()' had the URL ${e} with different integrity values. Please remove one of them.`,"missing-precache-entry":({cacheName:e,url:t})=>`Unable to find a precached response in ${e} for ${t}.`,"cross-origin-copy-response":({origin:e})=>`workbox-core.copyResponse() can only be used with same-origin responses. It was passed a response with origin ${e}.`},O=(e,t={})=>{const r=D[e];if(!r)throw new Error(`Unable to find message for code '${e}'.`);return r(t)};class W extends Error{constructor(e,t){super(O(e,t)),this.name=e,this.details=t}}const M=(e,t,r)=>{if("function"!==typeof e[t])throw r.expectedMethod=t,new W("missing-a-method",r)},K=(e,t,r)=>{if(!(e instanceof t))throw r.expectedClass=t,new W("incorrect-class",r)},B=(e,t,r)=>{if(!t.includes(e))throw r.validValueDescription=`Valid values are ${JSON.stringify(t)}.`,new W("invalid-value",r)},I=(e,t,r)=>{if(typeof e!==t)throw r.expectedType=t,new W("incorrect-type",r)},j=(()=>{"__WB_DISABLE_DEV_LOGS"in self||(self.__WB_DISABLE_DEV_LOGS=!1);let e=!1;const t={debug:"#7f8c8d",log:"#2ecc71",warn:"#f39c12",error:"#c0392b",groupCollapsed:"#3498db",groupEnd:null},r=function(r,a){if(self.__WB_DISABLE_DEV_LOGS)return;if("groupCollapsed"===r&&/^((?!chrome|android).)*safari/i.test(navigator.userAgent))return void console[r](...a);const n=e?[]:["%cworkbox",[`background: ${t[r]}`,"border-radius: 0.5em","color: white","font-weight: bold","padding: 2px 0.5em"].join(";")];console[r](...n,...a),"groupCollapsed"===r&&(e=!0),"groupEnd"===r&&(e=!1)},a={},n=Object.keys(t);for(const e of n){const t=e;a[t]=(...e)=>{r(t,e)}}return a})();try{self["workbox:routing:6.0.2"]&&_()}catch(e){}const H=["DELETE","GET","HEAD","PATCH","POST","PUT"],V=e=>e&&"object"==typeof e?(M(e,"handle",{moduleName:"workbox-routing",className:"Route",funcName:"constructor",paramName:"handler"}),e):(I(e,"function",{moduleName:"workbox-routing",className:"Route",funcName:"constructor",paramName:"handler"}),{handle:e});class F{constructor(e,t,r="GET"){I(e,"function",{moduleName:"workbox-routing",className:"Route",funcName:"constructor",paramName:"match"}),r&&B(r,H,{paramName:"method"}),this.handler=V(t),this.match=e,this.method=r}}class Y extends F{constructor(e,t,r){K(e,RegExp,{moduleName:"workbox-routing",className:"RegExpRoute",funcName:"constructor",paramName:"pattern"});super((({url:t})=>{const r=e.exec(t.href);if(r){if(t.origin===location.origin||0===r.index)return r.slice(1);j.debug(`The regular expression '${e}' only partially matched against the cross-origin URL '${t}'. RegExpRoute's will only handle cross-origin requests if they match the entire URL.`)}}),t,r)}}const G=e=>new URL(String(e),location.href).href.replace(new RegExp(`^${location.origin}`),"");class z{constructor(){this._routes=new Map,this._defaultHandlerMap=new Map}get routes(){return this._routes}addFetchListener(){self.addEventListener("fetch",(e=>{const{request:t}=e,r=this.handleRequest({request:t,event:e});r&&e.respondWith(r)}))}addCacheListener(){self.addEventListener("message",(e=>{if(e.data&&"CACHE_URLS"===e.data.type){const{payload:t}=e.data;j.debug("Caching URLs from the window",t.urlsToCache);const r=Promise.all(t.urlsToCache.map((t=>{"string"==typeof t&&(t=[t]);const r=new Request(...t);return this.handleRequest({request:r,event:e})})));e.waitUntil(r),e.ports&&e.ports[0]&&r.then((()=>e.ports[0].postMessage(!0)))}}))}handleRequest({request:e,event:t}){K(e,Request,{moduleName:"workbox-routing",className:"Router",funcName:"handleRequest",paramName:"options.request"});const r=new URL(e.url,location.href);if(!r.protocol.startsWith("http"))return void j.debug("Workbox Router only supports URLs that start with 'http'.");const a=r.origin===location.origin,{params:n,route:s}=this.findMatchingRoute({event:t,request:e,sameOrigin:a,url:r});let o=s&&s.handler;const i=[];o&&(i.push(["Found a route to handle this request:",s]),n&&i.push(["Passing the following params to the route's handler:",n]));const c=e.method;if(!o&&this._defaultHandlerMap.has(c)&&(i.push(`Failed to find a matching route. Falling back to the default handler for ${c}.`),o=this._defaultHandlerMap.get(c)),!o)return void j.debug(`No route found for: ${G(r)}`);let u;j.groupCollapsed(`Router is responding to: ${G(r)}`),i.forEach((e=>{Array.isArray(e)?j.log(...e):j.log(e)})),j.groupEnd();try{u=o.handle({url:r,request:e,event:t,params:n})}catch(e){u=Promise.reject(e)}return u instanceof Promise&&this._catchHandler&&(u=u.catch((a=>(j.groupCollapsed(`Error thrown when responding to:  ${G(r)}. Falling back to Catch Handler.`),j.error("Error thrown by:",s),j.error(a),j.groupEnd(),this._catchHandler.handle({url:r,request:e,event:t}))))),u}findMatchingRoute({url:e,sameOrigin:t,request:r,event:a}){const n=this._routes.get(r.method)||[];for(const s of n){let n;const o=s.match({url:e,sameOrigin:t,request:r,event:a});if(o)return o instanceof Promise&&j.warn(`While routing ${G(e)}, an async matchCallback function was used. Please convert the following route to use a synchronous matchCallback function:`,s),n=o,(Array.isArray(o)&&0===o.length||o.constructor===Object&&0===Object.keys(o).length||"boolean"==typeof o)&&(n=void 0),{route:s,params:n}}return{}}setDefaultHandler(e,t="GET"){this._defaultHandlerMap.set(t,V(e))}setCatchHandler(e){this._catchHandler=V(e)}registerRoute(e){I(e,"object",{moduleName:"workbox-routing",className:"Router",funcName:"registerRoute",paramName:"route"}),M(e,"match",{moduleName:"workbox-routing",className:"Router",funcName:"registerRoute",paramName:"route"}),I(e.handler,"object",{moduleName:"workbox-routing",className:"Router",funcName:"registerRoute",paramName:"route"}),M(e.handler,"handle",{moduleName:"workbox-routing",className:"Router",funcName:"registerRoute",paramName:"route.handler"}),I(e.method,"string",{moduleName:"workbox-routing",className:"Router",funcName:"registerRoute",paramName:"route.method"}),this._routes.has(e.method)||this._routes.set(e.method,[]),this._routes.get(e.method).push(e)}unregisterRoute(e){if(!this._routes.has(e.method))throw new W("unregister-route-but-not-found-with-method",{method:e.method});const t=this._routes.get(e.method).indexOf(e);if(!(t>-1))throw new W("unregister-route-route-not-registered");this._routes.get(e.method).splice(t,1)}}let J;try{self["workbox:core:6.0.2"]&&_()}catch(e){}const Q={"invalid-value":({paramName:e,validValueDescription:t,value:r})=>{if(!e||!t)throw new Error("Unexpected input to 'invalid-value' error.");return`The '${e}' parameter was given a value with an unexpected value. ${t} Received a value of ${JSON.stringify(r)}.`},"not-an-array":({moduleName:e,className:t,funcName:r,paramName:a})=>{if(!(e&&t&&r&&a))throw new Error("Unexpected input to 'not-an-array' error.");return`The parameter '${a}' passed into '${e}.${t}.${r}()' must be an array.`},"incorrect-type":({expectedType:e,paramName:t,moduleName:r,className:a,funcName:n})=>{if(!(e&&t&&r&&n))throw new Error("Unexpected input to 'incorrect-type' error.");return`The parameter '${t}' passed into '${r}.${a?a+".":""}${n}()' must be of type ${e}.`},"incorrect-class":({expectedClass:e,paramName:t,moduleName:r,className:a,funcName:n,isReturnValueProblem:s})=>{if(!e||!r||!n)throw new Error("Unexpected input to 'incorrect-class' error.");return s?`The return value from '${r}.${a?a+".":""}${n}()' must be an instance of class ${e.name}.`:`The parameter '${t}' passed into '${r}.${a?a+".":""}${n}()' must be an instance of class ${e.name}.`},"missing-a-method":({expectedMethod:e,paramName:t,moduleName:r,className:a,funcName:n})=>{if(!(e&&t&&r&&a&&n))throw new Error("Unexpected input to 'missing-a-method' error.");return`${r}.${a}.${n}() expected the '${t}' parameter to expose a '${e}' method.`},"add-to-cache-list-unexpected-type":({entry:e})=>`An unexpected entry was passed to 'workbox-precaching.PrecacheController.addToCacheList()' The entry '${JSON.stringify(e)}' isn't supported. You must supply an array of strings with one or more characters, objects with a url property or Request objects.`,"add-to-cache-list-conflicting-entries":({firstEntry:e,secondEntry:t})=>{if(!e||!t)throw new Error("Unexpected input to 'add-to-cache-list-duplicate-entries' error.");return`Two of the entries passed to 'workbox-precaching.PrecacheController.addToCacheList()' had the URL ${e._entryId} but different revision details. Workbox is unable to cache and version the asset correctly. Please remove one of the entries.`},"plugin-error-request-will-fetch":({thrownError:e})=>{if(!e)throw new Error("Unexpected input to 'plugin-error-request-will-fetch', error.");return`An error was thrown by a plugins 'requestWillFetch()' method. The thrown error message was: '${e.message}'.`},"invalid-cache-name":({cacheNameId:e,value:t})=>{if(!e)throw new Error("Expected a 'cacheNameId' for error 'invalid-cache-name'");return`You must provide a name containing at least one character for setCacheDetails({${e}: '...'}). Received a value of '${JSON.stringify(t)}'`},"unregister-route-but-not-found-with-method":({method:e})=>{if(!e)throw new Error("Unexpected input to 'unregister-route-but-not-found-with-method' error.");return`The route you're trying to unregister was not  previously registered for the method type '${e}'.`},"unregister-route-route-not-registered":()=>"The route you're trying to unregister was not previously registered.","queue-replay-failed":({name:e})=>`Replaying the background sync queue '${e}' failed.`,"duplicate-queue-name":({name:e})=>`The Queue name '${e}' is already being used. All instances of backgroundSync.Queue must be given unique names.`,"expired-test-without-max-age":({methodName:e,paramName:t})=>`The '${e}()' method can only be used when the '${t}' is used in the constructor.`,"unsupported-route-type":({moduleName:e,className:t,funcName:r,paramName:a})=>`The supplied '${a}' parameter was an unsupported type. Please check the docs for ${e}.${t}.${r} for valid input types.`,"not-array-of-class":({value:e,expectedClass:t,moduleName:r,className:a,funcName:n,paramName:s})=>`The supplied '${s}' parameter must be an array of '${t}' objects. Received '${JSON.stringify(e)},'. Please check the call to ${r}.${a}.${n}() to fix the issue.`,"max-entries-or-age-required":({moduleName:e,className:t,funcName:r})=>`You must define either config.maxEntries or config.maxAgeSecondsin ${e}.${t}.${r}`,"statuses-or-headers-required":({moduleName:e,className:t,funcName:r})=>`You must define either config.statuses or config.headersin ${e}.${t}.${r}`,"invalid-string":({moduleName:e,funcName:t,paramName:r})=>{if(!r||!e||!t)throw new Error("Unexpected input to 'invalid-string' error.");return`When using strings, the '${r}' parameter must start with 'http' (for cross-origin matches) or '/' (for same-origin matches). Please see the docs for ${e}.${t}() for more info.`},"channel-name-required":()=>"You must provide a channelName to construct a BroadcastCacheUpdate instance.","invalid-responses-are-same-args":()=>"The arguments passed into responsesAreSame() appear to be invalid. Please ensure valid Responses are used.","expire-custom-caches-only":()=>"You must provide a 'cacheName' property when using the expiration plugin with a runtime caching strategy.","unit-must-be-bytes":({normalizedRangeHeader:e})=>{if(!e)throw new Error("Unexpected input to 'unit-must-be-bytes' error.");return`The 'unit' portion of the Range header must be set to 'bytes'. The Range header provided was "${e}"`},"single-range-only":({normalizedRangeHeader:e})=>{if(!e)throw new Error("Unexpected input to 'single-range-only' error.");return`Multiple ranges are not supported. Please use a  single start value, and optional end value. The Range header provided was "${e}"`},"invalid-range-values":({normalizedRangeHeader:e})=>{if(!e)throw new Error("Unexpected input to 'invalid-range-values' error.");return`The Range header is missing both start and end values. At least one of those values is needed. The Range header provided was "${e}"`},"no-range-header":()=>"No Range header was found in the Request provided.","range-not-satisfiable":({size:e,start:t,end:r})=>`The start (${t}) and end (${r}) values in the Range are not satisfiable by the cached response, which is ${e} bytes.`,"attempt-to-cache-non-get-request":({url:e,method:t})=>`Unable to cache '${e}' because it is a '${t}' request and only 'GET' requests can be cached.`,"cache-put-with-no-response":({url:e})=>`There was an attempt to cache '${e}' but the response was not defined.`,"no-response":({url:e,error:t})=>{let r=`The strategy could not generate a response for '${e}'.`;return t&&(r+=` The underlying error is ${t}.`),r},"bad-precaching-response":({url:e,status:t})=>`The precaching request for '${e}' failed`+(t?` with an HTTP status of ${t}.`:"."),"non-precached-url":({url:e})=>`createHandlerBoundToURL('${e}') was called, but that URL is not precached. Please pass in a URL that is precached instead.`,"add-to-cache-list-conflicting-integrities":({url:e})=>`Two of the entries passed to 'workbox-precaching.PrecacheController.addToCacheList()' had the URL ${e} with different integrity values. Please remove one of them.`,"missing-precache-entry":({cacheName:e,url:t})=>`Unable to find a precached response in ${e} for ${t}.`,"cross-origin-copy-response":({origin:e})=>`workbox-core.copyResponse() can only be used with same-origin responses. It was passed a response with origin ${e}.`},X=(e,t={})=>{const r=Q[e];if(!r)throw new Error(`Unable to find message for code '${e}'.`);return r(t)};class Z extends Error{constructor(e,t){super(X(e,t)),this.name=e,this.details=t}}const ee=(e,t,r)=>{if(!(e instanceof t))throw r.expectedClass=t,new Z("incorrect-class",r)},te=(e,t,r)=>{if(typeof e!==t)throw r.expectedType=t,new Z("incorrect-type",r)},re=(()=>{"__WB_DISABLE_DEV_LOGS"in self||(self.__WB_DISABLE_DEV_LOGS=!1);let e=!1;const t={debug:"#7f8c8d",log:"#2ecc71",warn:"#f39c12",error:"#c0392b",groupCollapsed:"#3498db",groupEnd:null},r=function(r,a){if(self.__WB_DISABLE_DEV_LOGS)return;if("groupCollapsed"===r&&/^((?!chrome|android).)*safari/i.test(navigator.userAgent))return void console[r](...a);const n=e?[]:["%cworkbox",[`background: ${t[r]}`,"border-radius: 0.5em","color: white","font-weight: bold","padding: 2px 0.5em"].join(";")];console[r](...n,...a),"groupCollapsed"===r&&(e=!0),"groupEnd"===r&&(e=!1)},a={},n=Object.keys(t);for(const e of n){const t=e;a[t]=(...e)=>{r(t,e)}}return a})(),ae={googleAnalytics:"googleAnalytics",precache:"precache-v2",prefix:"workbox",runtime:"runtime",suffix:"undefined"!=typeof registration?registration.scope:""},ne=e=>[ae.prefix,e,ae.suffix].filter((e=>e&&e.length>0)).join("-"),se=e=>e||ne(ae.runtime),oe=e=>new URL(String(e),location.href).href.replace(new RegExp(`^${location.origin}`),"");function ie(e,t){const r=new URL(e);for(const e of t)r.searchParams.delete(e);return r.href}class ce{constructor(){this.promise=new Promise(((e,t)=>{this.resolve=e,this.reject=t}))}}const ue=new Set;try{self["workbox:strategies:6.0.2"]&&_()}catch(e){}function he(e){return"string"==typeof e?new Request(e):e}class le{constructor(e,t){this._cacheKeys={},ee(t.event,ExtendableEvent,{moduleName:"workbox-strategies",className:"StrategyHandler",funcName:"constructor",paramName:"options.event"}),Object.assign(this,t),this.event=t.event,this._strategy=e,this._handlerDeferred=new ce,this._extendLifetimePromises=[],this._plugins=[...e.plugins],this._pluginStateMap=new Map;for(const e of this._plugins)this._pluginStateMap.set(e,{});this.event.waitUntil(this._handlerDeferred.promise)}fetch(e){return this.waitUntil((async()=>{const{event:t}=this;let r=he(e);if("navigate"===r.mode&&t instanceof FetchEvent&&t.preloadResponse){const e=await t.preloadResponse;if(e)return re.log(`Using a preloaded navigation response for '${oe(r.url)}'`),e}const a=this.hasCallback("fetchDidFail")?r.clone():null;try{for(const e of this.iterateCallbacks("requestWillFetch"))r=await e({request:r.clone(),event:t})}catch(e){throw new Z("plugin-error-request-will-fetch",{thrownError:e})}const n=r.clone();try{let e;e=await fetch(r,"navigate"===r.mode?void 0:this._strategy.fetchOptions),re.debug(`Network request for '${oe(r.url)}' returned a response with status '${e.status}'.`);for(const r of this.iterateCallbacks("fetchDidSucceed"))e=await r({event:t,request:n,response:e});return e}catch(e){throw re.error(`Network request for '${oe(r.url)}' threw an error.`,e),a&&await this.runCallbacks("fetchDidFail",{error:e,event:t,originalRequest:a.clone(),request:n.clone()}),e}})())}async fetchAndCachePut(e){const t=await this.fetch(e),r=t.clone();return this.waitUntil(this.cachePut(e,r)),t}cacheMatch(e){return this.waitUntil((async()=>{const t=he(e);let r;const{cacheName:a,matchOptions:n}=this._strategy,s=await this.getCacheKey(t,"read"),o={...n,cacheName:a};r=await caches.match(s,o),r?re.debug(`Found a cached response in '${a}'.`):re.debug(`No cached response found in '${a}'.`);for(const e of this.iterateCallbacks("cachedResponseWillBeUsed"))r=await e({cacheName:a,matchOptions:n,cachedResponse:r,request:s,event:this.event})||void 0;return r})())}async cachePut(e,t){const r=he(e);var a;await(a=0,new Promise((e=>setTimeout(e,a))));const n=await this.getCacheKey(r,"write");if(n.method&&"GET"!==n.method)throw new Z("attempt-to-cache-non-get-request",{url:oe(n.url),method:n.method});if(!t)throw re.error(`Cannot cache non-existent response for '${oe(n.url)}'.`),new Z("cache-put-with-no-response",{url:oe(n.url)});const s=await this._ensureResponseSafeToCache(t);if(!s)return void re.debug(`Response '${oe(n.url)}' will not be cached.`,s);const{cacheName:o,matchOptions:i}=this._strategy,c=await self.caches.open(o),u=this.hasCallback("cacheDidUpdate"),h=u?await async function(e,t,r,a){const n=ie(t.url,r);if(t.url===n)return e.match(t,a);const s={...a,ignoreSearch:!0},o=await e.keys(t,s);for(const t of o)if(n===ie(t.url,r))return e.match(t,a)}(c,n.clone(),["__WB_REVISION__"],i):null;re.debug(`Updating the '${o}' cache with a new Response for ${oe(n.url)}.`);try{await c.put(n,u?s.clone():s)}catch(e){throw"QuotaExceededError"===e.name&&await async function(){re.log(`About to run ${ue.size} callbacks to clean up caches.`);for(const e of ue)await e(),re.log(e,"is complete.");re.log("Finished running callbacks.")}(),e}for(const e of this.iterateCallbacks("cacheDidUpdate"))await e({cacheName:o,oldResponse:h,newResponse:s.clone(),request:n,event:this.event})}async getCacheKey(e,t){if(!this._cacheKeys[t]){let r=e;for(const e of this.iterateCallbacks("cacheKeyWillBeUsed"))r=he(await e({mode:t,request:r,event:this.event,params:this.params}));this._cacheKeys[t]=r}return this._cacheKeys[t]}hasCallback(e){for(const t of this._strategy.plugins)if(e in t)return!0;return!1}async runCallbacks(e,t){for(const r of this.iterateCallbacks(e))await r(t)}*iterateCallbacks(e){for(const t of this._strategy.plugins)if("function"==typeof t[e]){const r=this._pluginStateMap.get(t),a=a=>{const n={...a,state:r};return t[e](n)};yield a}}waitUntil(e){return this._extendLifetimePromises.push(e),e}async doneWaiting(){let e;for(;e=this._extendLifetimePromises.shift();)await e}destroy(){this._handlerDeferred.resolve()}async _ensureResponseSafeToCache(e){let t=e,r=!1;for(const e of this.iterateCallbacks("cacheWillUpdate"))if(t=await e({request:this.request,response:t,event:this.event})||void 0,r=!0,!t)break;return r||(t&&200!==t.status&&(t=void 0),t&&200!==t.status&&(0===t.status?re.warn(`The response for '${this.request.url}' is an opaque response. The caching strategy that you're using will not cache opaque responses by default.`):re.debug(`The response for '${this.request.url}' returned a status code of '${e.status}' and won't be cached as a result.`))),t}}class de{constructor(e={}){this.cacheName=se(e.cacheName),this.plugins=e.plugins||[],this.fetchOptions=e.fetchOptions,this.matchOptions=e.matchOptions}handle(e){const[t]=this.handleAll(e);return t}handleAll(e){e instanceof FetchEvent&&(e={event:e,request:e.request});const t=e.event,r="string"==typeof e.request?new Request(e.request):e.request,a="params"in e?e.params:void 0,n=new le(this,{event:t,request:r,params:a}),s=this._getResponse(n,r,t);return[s,this._awaitComplete(s,n,r,t)]}async _getResponse(e,t,r){let a;await e.runCallbacks("handlerWillStart",{event:r,request:t});try{if(a=await this._handle(t,e),!a||"error"===a.type)throw new Z("no-response",{url:t.url})}catch(n){for(const s of e.iterateCallbacks("handlerDidError"))if(a=await s({error:n,event:r,request:t}),a)break;if(!a)throw n;re.log(`While responding to '${oe(t.url)}', an ${n} error occurred. Using a fallback response provided by a handlerDidError plugin.`)}for(const n of e.iterateCallbacks("handlerWillRespond"))a=await n({event:r,request:t,response:a});return a}async _awaitComplete(e,t,r,a){let n,s;try{n=await e}catch(s){}try{await t.runCallbacks("handlerDidRespond",{event:a,request:r,response:n}),await t.doneWaiting()}catch(e){s=e}if(await t.runCallbacks("handlerDidComplete",{event:a,request:r,response:n,error:s}),t.destroy(),s)throw s}}const pe=(e,t)=>`Using ${e} to respond to '${oe(t.url)}'`,me=e=>{e&&(re.groupCollapsed("View the final response here."),re.log(e||"[No response returned]"),re.groupEnd())},fe={cacheWillUpdate:async({response:e})=>200===e.status||0===e.status?e:null};class ge extends de{constructor(e={}){super(e),this.plugins.some((e=>"cacheWillUpdate"in e))||this.plugins.unshift(fe),this._networkTimeoutSeconds=e.networkTimeoutSeconds||0,this._networkTimeoutSeconds&&te(this._networkTimeoutSeconds,"number",{moduleName:"workbox-strategies",className:this.constructor.name,funcName:"constructor",paramName:"networkTimeoutSeconds"})}async _handle(e,t){const r=[];ee(e,Request,{moduleName:"workbox-strategies",className:this.constructor.name,funcName:"handle",paramName:"makeRequest"});const a=[];let n;if(this._networkTimeoutSeconds){const{id:s,promise:o}=this._getTimeoutPromise({request:e,logs:r,handler:t});n=s,a.push(o)}const s=this._getNetworkPromise({timeoutId:n,request:e,logs:r,handler:t});a.push(s);for(const e of a)t.waitUntil(e);let o=await Promise.race(a);o||(o=await s),re.groupCollapsed(pe(this.constructor.name,e));for(const e of r)re.log(e);if(me(o),re.groupEnd(),!o)throw new Z("no-response",{url:e.url});return o}_getTimeoutPromise({request:e,logs:t,handler:r}){let a;return{promise:new Promise((n=>{a=setTimeout((async()=>{t.push(`Timing out the network response at ${this._networkTimeoutSeconds} seconds.`),n(await r.cacheMatch(e))}),1e3*this._networkTimeoutSeconds)})),id:a}}async _getNetworkPromise({timeoutId:e,request:t,logs:r,handler:a}){let n,s;try{s=await a.fetchAndCachePut(t)}catch(e){n=e}return e&&clearTimeout(e),s?r.push("Got response from network."):r.push("Unable to get a response from the network. Will respond with a cached response."),!n&&s||(s=await a.cacheMatch(t),s?r.push(`Found a cached response in the '${this.cacheName}' cache.`):r.push(`No response found in the '${this.cacheName}' cache.`)),s}}class we extends de{constructor(e){super(e),this.plugins.some((e=>"cacheWillUpdate"in e))||this.plugins.unshift(fe)}async _handle(e,t){const r=[];ee(e,Request,{moduleName:"workbox-strategies",className:this.constructor.name,funcName:"handle",paramName:"request"});const a=t.fetchAndCachePut(e).catch((()=>{}));let n,s=await t.cacheMatch(e);if(s)r.push(`Found a cached response in the '${this.cacheName}' cache. Will update with the network response in the background.`);else{r.push(`No response found in the '${this.cacheName}' cache. Will wait for the network response.`);try{s=await a}catch(e){n=e}}re.groupCollapsed(pe(this.constructor.name,e));for(const e of r)re.log(e);if(me(s),re.groupEnd(),!s)throw new Z("no-response",{url:e.url,error:n});return s}}try{self["workbox:core:6.0.2"]&&_()}catch(e){}const ye={"invalid-value":({paramName:e,validValueDescription:t,value:r})=>{if(!e||!t)throw new Error("Unexpected input to 'invalid-value' error.");return`The '${e}' parameter was given a value with an unexpected value. ${t} Received a value of ${JSON.stringify(r)}.`},"not-an-array":({moduleName:e,className:t,funcName:r,paramName:a})=>{if(!(e&&t&&r&&a))throw new Error("Unexpected input to 'not-an-array' error.");return`The parameter '${a}' passed into '${e}.${t}.${r}()' must be an array.`},"incorrect-type":({expectedType:e,paramName:t,moduleName:r,className:a,funcName:n})=>{if(!(e&&t&&r&&n))throw new Error("Unexpected input to 'incorrect-type' error.");return`The parameter '${t}' passed into '${r}.${a?a+".":""}${n}()' must be of type ${e}.`},"incorrect-class":({expectedClass:e,paramName:t,moduleName:r,className:a,funcName:n,isReturnValueProblem:s})=>{if(!e||!r||!n)throw new Error("Unexpected input to 'incorrect-class' error.");return s?`The return value from '${r}.${a?a+".":""}${n}()' must be an instance of class ${e.name}.`:`The parameter '${t}' passed into '${r}.${a?a+".":""}${n}()' must be an instance of class ${e.name}.`},"missing-a-method":({expectedMethod:e,paramName:t,moduleName:r,className:a,funcName:n})=>{if(!(e&&t&&r&&a&&n))throw new Error("Unexpected input to 'missing-a-method' error.");return`${r}.${a}.${n}() expected the '${t}' parameter to expose a '${e}' method.`},"add-to-cache-list-unexpected-type":({entry:e})=>`An unexpected entry was passed to 'workbox-precaching.PrecacheController.addToCacheList()' The entry '${JSON.stringify(e)}' isn't supported. You must supply an array of strings with one or more characters, objects with a url property or Request objects.`,"add-to-cache-list-conflicting-entries":({firstEntry:e,secondEntry:t})=>{if(!e||!t)throw new Error("Unexpected input to 'add-to-cache-list-duplicate-entries' error.");return`Two of the entries passed to 'workbox-precaching.PrecacheController.addToCacheList()' had the URL ${e._entryId} but different revision details. Workbox is unable to cache and version the asset correctly. Please remove one of the entries.`},"plugin-error-request-will-fetch":({thrownError:e})=>{if(!e)throw new Error("Unexpected input to 'plugin-error-request-will-fetch', error.");return`An error was thrown by a plugins 'requestWillFetch()' method. The thrown error message was: '${e.message}'.`},"invalid-cache-name":({cacheNameId:e,value:t})=>{if(!e)throw new Error("Expected a 'cacheNameId' for error 'invalid-cache-name'");return`You must provide a name containing at least one character for setCacheDetails({${e}: '...'}). Received a value of '${JSON.stringify(t)}'`},"unregister-route-but-not-found-with-method":({method:e})=>{if(!e)throw new Error("Unexpected input to 'unregister-route-but-not-found-with-method' error.");return`The route you're trying to unregister was not  previously registered for the method type '${e}'.`},"unregister-route-route-not-registered":()=>"The route you're trying to unregister was not previously registered.","queue-replay-failed":({name:e})=>`Replaying the background sync queue '${e}' failed.`,"duplicate-queue-name":({name:e})=>`The Queue name '${e}' is already being used. All instances of backgroundSync.Queue must be given unique names.`,"expired-test-without-max-age":({methodName:e,paramName:t})=>`The '${e}()' method can only be used when the '${t}' is used in the constructor.`,"unsupported-route-type":({moduleName:e,className:t,funcName:r,paramName:a})=>`The supplied '${a}' parameter was an unsupported type. Please check the docs for ${e}.${t}.${r} for valid input types.`,"not-array-of-class":({value:e,expectedClass:t,moduleName:r,className:a,funcName:n,paramName:s})=>`The supplied '${s}' parameter must be an array of '${t}' objects. Received '${JSON.stringify(e)},'. Please check the call to ${r}.${a}.${n}() to fix the issue.`,"max-entries-or-age-required":({moduleName:e,className:t,funcName:r})=>`You must define either config.maxEntries or config.maxAgeSecondsin ${e}.${t}.${r}`,"statuses-or-headers-required":({moduleName:e,className:t,funcName:r})=>`You must define either config.statuses or config.headersin ${e}.${t}.${r}`,"invalid-string":({moduleName:e,funcName:t,paramName:r})=>{if(!r||!e||!t)throw new Error("Unexpected input to 'invalid-string' error.");return`When using strings, the '${r}' parameter must start with 'http' (for cross-origin matches) or '/' (for same-origin matches). Please see the docs for ${e}.${t}() for more info.`},"channel-name-required":()=>"You must provide a channelName to construct a BroadcastCacheUpdate instance.","invalid-responses-are-same-args":()=>"The arguments passed into responsesAreSame() appear to be invalid. Please ensure valid Responses are used.","expire-custom-caches-only":()=>"You must provide a 'cacheName' property when using the expiration plugin with a runtime caching strategy.","unit-must-be-bytes":({normalizedRangeHeader:e})=>{if(!e)throw new Error("Unexpected input to 'unit-must-be-bytes' error.");return`The 'unit' portion of the Range header must be set to 'bytes'. The Range header provided was "${e}"`},"single-range-only":({normalizedRangeHeader:e})=>{if(!e)throw new Error("Unexpected input to 'single-range-only' error.");return`Multiple ranges are not supported. Please use a  single start value, and optional end value. The Range header provided was "${e}"`},"invalid-range-values":({normalizedRangeHeader:e})=>{if(!e)throw new Error("Unexpected input to 'invalid-range-values' error.");return`The Range header is missing both start and end values. At least one of those values is needed. The Range header provided was "${e}"`},"no-range-header":()=>"No Range header was found in the Request provided.","range-not-satisfiable":({size:e,start:t,end:r})=>`The start (${t}) and end (${r}) values in the Range are not satisfiable by the cached response, which is ${e} bytes.`,"attempt-to-cache-non-get-request":({url:e,method:t})=>`Unable to cache '${e}' because it is a '${t}' request and only 'GET' requests can be cached.`,"cache-put-with-no-response":({url:e})=>`There was an attempt to cache '${e}' but the response was not defined.`,"no-response":({url:e,error:t})=>{let r=`The strategy could not generate a response for '${e}'.`;return t&&(r+=` The underlying error is ${t}.`),r},"bad-precaching-response":({url:e,status:t})=>`The precaching request for '${e}' failed`+(t?` with an HTTP status of ${t}.`:"."),"non-precached-url":({url:e})=>`createHandlerBoundToURL('${e}') was called, but that URL is not precached. Please pass in a URL that is precached instead.`,"add-to-cache-list-conflicting-integrities":({url:e})=>`Two of the entries passed to 'workbox-precaching.PrecacheController.addToCacheList()' had the URL ${e} with different integrity values. Please remove one of them.`,"missing-precache-entry":({cacheName:e,url:t})=>`Unable to find a precached response in ${e} for ${t}.`,"cross-origin-copy-response":({origin:e})=>`workbox-core.copyResponse() can only be used with same-origin responses. It was passed a response with origin ${e}.`},be=(e,t={})=>{const r=ye[e];if(!r)throw new Error(`Unable to find message for code '${e}'.`);return r(t)};class Ne extends Error{constructor(e,t){super(be(e,t)),this.name=e,this.details=t}}const $e=(e,t,r)=>{if(!(e instanceof t))throw r.expectedClass=t,new Ne("incorrect-class",r)},ve=(e,t,r)=>{if(typeof e!==t)throw r.expectedType=t,new Ne("incorrect-type",r)};function xe(e){e.then((()=>{}))}const _e=(()=>{"__WB_DISABLE_DEV_LOGS"in self||(self.__WB_DISABLE_DEV_LOGS=!1);let e=!1;const t={debug:"#7f8c8d",log:"#2ecc71",warn:"#f39c12",error:"#c0392b",groupCollapsed:"#3498db",groupEnd:null},r=function(r,a){if(self.__WB_DISABLE_DEV_LOGS)return;if("groupCollapsed"===r&&/^((?!chrome|android).)*safari/i.test(navigator.userAgent))return void console[r](...a);const n=e?[]:["%cworkbox",[`background: ${t[r]}`,"border-radius: 0.5em","color: white","font-weight: bold","padding: 2px 0.5em"].join(";")];console[r](...n,...a),"groupCollapsed"===r&&(e=!0),"groupEnd"===r&&(e=!1)},a={},n=Object.keys(t);for(const e of n){const t=e;a[t]=(...e)=>{r(t,e)}}return a})();class Re{constructor(e,t,{onupgradeneeded:r,onversionchange:a}={}){this._db=null,this._name=e,this._version=t,this._onupgradeneeded=r,this._onversionchange=a||(()=>this.close())}get db(){return this._db}async open(){if(!this._db)return this._db=await new Promise(((e,t)=>{let r=!1;setTimeout((()=>{r=!0,t(new Error("The open request was blocked and timed out"))}),this.OPEN_TIMEOUT);const a=indexedDB.open(this._name,this._version);a.onerror=()=>t(a.error),a.onupgradeneeded=e=>{r?(a.transaction.abort(),a.result.close()):"function"==typeof this._onupgradeneeded&&this._onupgradeneeded(e)},a.onsuccess=()=>{const t=a.result;r?t.close():(t.onversionchange=this._onversionchange.bind(this),e(t))}})),this}async getKey(e,t){return(await this.getAllKeys(e,t,1))[0]}async getAll(e,t,r){return await this.getAllMatching(e,{query:t,count:r})}async getAllKeys(e,t,r){return(await this.getAllMatching(e,{query:t,count:r,includeKeys:!0})).map((e=>e.key))}async getAllMatching(e,{index:t,query:r=null,direction:a="next",count:n,includeKeys:s=!1}={}){return await this.transaction([e],"readonly",((o,i)=>{const c=o.objectStore(e),u=t?c.index(t):c,h=[],l=u.openCursor(r,a);l.onsuccess=()=>{const e=l.result;e?(h.push(s?e:e.value),n&&h.length>=n?i(h):e.continue()):i(h)}}))}async transaction(e,t,r){return await this.open(),await new Promise(((a,n)=>{const s=this._db.transaction(e,t);s.onabort=()=>n(s.error),s.oncomplete=()=>a(),r(s,(e=>a(e)))}))}async _call(e,t,r,...a){return await this.transaction([t],r,((r,n)=>{const s=r.objectStore(t),o=s[e].apply(s,a);o.onsuccess=()=>n(o.result)}))}close(){this._db&&(this._db.close(),this._db=null)}}Re.prototype.OPEN_TIMEOUT=2e3;const Ee={readonly:["get","count","getKey","getAll","getAllKeys"],readwrite:["add","put","clear","delete"]};for(const[e,t]of Object.entries(Ee))for(const r of t)r in IDBObjectStore.prototype&&(Re.prototype[r]=async function(t,...a){return await this._call(r,t,e,...a)});try{self["workbox:expiration:6.0.2"]&&_()}catch(e){}const Te="cache-entries",qe=e=>{const t=new URL(e,location.href);return t.hash="",t.href};class Ue{constructor(e){this._cacheName=e,this._db=new Re("workbox-expiration",1,{onupgradeneeded:e=>this._handleUpgrade(e)})}_handleUpgrade(e){const t=e.target.result.createObjectStore(Te,{keyPath:"id"});t.createIndex("cacheName","cacheName",{unique:!1}),t.createIndex("timestamp","timestamp",{unique:!1}),(async e=>{await new Promise(((t,r)=>{const a=indexedDB.deleteDatabase(e);a.onerror=()=>{r(a.error)},a.onblocked=()=>{r(new Error("Delete blocked"))},a.onsuccess=()=>{t()}}))})(this._cacheName)}async setTimestamp(e,t){const r={url:e=qe(e),timestamp:t,cacheName:this._cacheName,id:this._getId(e)};await this._db.put(Te,r)}async getTimestamp(e){return(await this._db.get(Te,this._getId(e))).timestamp}async expireEntries(e,t){const r=await this._db.transaction(Te,"readwrite",((r,a)=>{const n=r.objectStore(Te).index("timestamp").openCursor(null,"prev"),s=[];let o=0;n.onsuccess=()=>{const r=n.result;if(r){const a=r.value;a.cacheName===this._cacheName&&(e&&a.timestamp<e||t&&o>=t?s.push(r.value):o++),r.continue()}else a(s)}})),a=[];for(const e of r)await this._db.delete(Te,e.id),a.push(e.url);return a}_getId(e){return this._cacheName+"|"+qe(e)}}class ke{constructor(e,t={}){if(this._isRunning=!1,this._rerunRequested=!1,ve(e,"string",{moduleName:"workbox-expiration",className:"CacheExpiration",funcName:"constructor",paramName:"cacheName"}),!t.maxEntries&&!t.maxAgeSeconds)throw new Ne("max-entries-or-age-required",{moduleName:"workbox-expiration",className:"CacheExpiration",funcName:"constructor"});t.maxEntries&&ve(t.maxEntries,"number",{moduleName:"workbox-expiration",className:"CacheExpiration",funcName:"constructor",paramName:"config.maxEntries"}),t.maxAgeSeconds&&ve(t.maxAgeSeconds,"number",{moduleName:"workbox-expiration",className:"CacheExpiration",funcName:"constructor",paramName:"config.maxAgeSeconds"}),this._maxEntries=t.maxEntries,this._maxAgeSeconds=t.maxAgeSeconds,this._matchOptions=t.matchOptions,this._cacheName=e,this._timestampModel=new Ue(e)}async expireEntries(){if(this._isRunning)return void(this._rerunRequested=!0);this._isRunning=!0;const e=this._maxAgeSeconds?Date.now()-1e3*this._maxAgeSeconds:0,t=await this._timestampModel.expireEntries(e,this._maxEntries),r=await self.caches.open(this._cacheName);for(const e of t)await r.delete(e,this._matchOptions);t.length>0?(_e.groupCollapsed(`Expired ${t.length} `+(1===t.length?"entry":"entries")+" and removed "+(1===t.length?"it":"them")+" from the "+`'${this._cacheName}' cache.`),_e.log(`Expired the following ${1===t.length?"URL":"URLs"}:`),t.forEach((e=>_e.log(`    ${e}`))),_e.groupEnd()):_e.debug("Cache expiration ran and found no entries to remove."),this._isRunning=!1,this._rerunRequested&&(this._rerunRequested=!1,xe(this.expireEntries()))}async updateTimestamp(e){ve(e,"string",{moduleName:"workbox-expiration",className:"CacheExpiration",funcName:"updateTimestamp",paramName:"url"}),await this._timestampModel.setTimestamp(e,Date.now())}async isURLExpired(e){if(this._maxAgeSeconds){return await this._timestampModel.getTimestamp(e)<Date.now()-1e3*this._maxAgeSeconds}throw new Ne("expired-test-without-max-age",{methodName:"isURLExpired",paramName:"maxAgeSeconds"})}async delete(){this._rerunRequested=!1,await this._timestampModel.expireEntries(1/0)}}const Ce={googleAnalytics:"googleAnalytics",precache:"precache-v2",prefix:"workbox",runtime:"runtime",suffix:"undefined"!=typeof registration?registration.scope:""},Le=e=>[Ce.prefix,e,Ce.suffix].filter((e=>e&&e.length>0)).join("-"),Se=e=>e||Le(Ce.runtime),Pe=new Set;class Ae{constructor(e={}){if(this.cachedResponseWillBeUsed=async({event:e,request:t,cacheName:r,cachedResponse:a})=>{if(!a)return null;const n=this._isResponseDateFresh(a),s=this._getCacheExpiration(r);xe(s.expireEntries());const o=s.updateTimestamp(t.url);if(e)try{e.waitUntil(o)}catch(t){"request"in e&&_e.warn(`Unable to ensure service worker stays alive when updating cache entry for '${i=e.request.url,new URL(String(i),location.href).href.replace(new RegExp(`^${location.origin}`),"")}'.`)}var i;return n?a:null},this.cacheDidUpdate=async({cacheName:e,request:t})=>{ve(e,"string",{moduleName:"workbox-expiration",className:"Plugin",funcName:"cacheDidUpdate",paramName:"cacheName"}),$e(t,Request,{moduleName:"workbox-expiration",className:"Plugin",funcName:"cacheDidUpdate",paramName:"request"});const r=this._getCacheExpiration(e);await r.updateTimestamp(t.url),await r.expireEntries()},!e.maxEntries&&!e.maxAgeSeconds)throw new Ne("max-entries-or-age-required",{moduleName:"workbox-expiration",className:"Plugin",funcName:"constructor"});var t;e.maxEntries&&ve(e.maxEntries,"number",{moduleName:"workbox-expiration",className:"Plugin",funcName:"constructor",paramName:"config.maxEntries"}),e.maxAgeSeconds&&ve(e.maxAgeSeconds,"number",{moduleName:"workbox-expiration",className:"Plugin",funcName:"constructor",paramName:"config.maxAgeSeconds"}),this._config=e,this._maxAgeSeconds=e.maxAgeSeconds,this._cacheExpirations=new Map,e.purgeOnQuotaError&&(ve(t=()=>this.deleteCacheAndMetadata(),"function",{moduleName:"workbox-core",funcName:"register",paramName:"callback"}),Pe.add(t),_e.log("Registered a callback to respond to quota errors.",t))}_getCacheExpiration(e){if(e===Se())throw new Ne("expire-custom-caches-only");let t=this._cacheExpirations.get(e);return t||(t=new ke(e,this._config),this._cacheExpirations.set(e,t)),t}_isResponseDateFresh(e){if(!this._maxAgeSeconds)return!0;const t=this._getDateHeaderTimestamp(e);if(null===t)return!0;return t>=Date.now()-1e3*this._maxAgeSeconds}_getDateHeaderTimestamp(e){if(!e.headers.has("date"))return null;const t=e.headers.get("date"),r=new Date(t).getTime();return isNaN(r)?null:r}async deleteCacheAndMetadata(){for(const[e,t]of this._cacheExpirations)await self.caches.delete(e),await t.delete();this._cacheExpirations=new Map}}const De=["localhost","127.0.0.1","ngrok.io"].some((e=>location.hostname.includes(e)));var Oe;self.addEventListener("install",(()=>self.skipWaiting())),self.addEventListener("activate",(()=>self.clients.claim())),De||(function(e){k().addToCacheList(e),e.length>0&&(self.addEventListener("install",P),self.addEventListener("activate",A))}([...r.map((e=>({url:e,revision:void 0}))),...t.map((t=>({url:t,revision:e.toString()})))]),S(Oe)),[{pattern:/^\/$/},{pattern:/^\/auth\/?$/},{pattern:/^\/otp\/?$/}].forEach((({pattern:t})=>function(e,t,r){let a;if("string"==typeof e){const n=new URL(e,location.href);{if(!e.startsWith("/")&&!e.startsWith("http"))throw new W("invalid-string",{moduleName:"workbox-routing",funcName:"registerRoute",paramName:"capture"});const t=e.startsWith("http")?n.pathname:e,r="[*:?+]";new RegExp(`${r}`).exec(t)&&j.debug(`The '$capture' parameter contains an Express-style wildcard character (${r}). Strings are now always interpreted as exact matches; use a RegExp for partial or wildcard matches.`)}a=new F((({url:t})=>(t.pathname===n.pathname&&t.origin!==n.origin&&j.debug(`${e} only partially matches the cross-origin URL ${t}. This route will only handle cross-origin requests if they match the entire URL.`),t.href===n.href)),t,r)}else if(e instanceof RegExp)a=new Y(e,t,r);else if("function"==typeof e)a=new F(e,t,r);else{if(!(e instanceof F))throw new W("unsupported-route-type",{moduleName:"workbox-routing",funcName:"registerRoute",paramName:"capture"});a=e}return(J||(J=new z,J.addFetchListener(),J.addCacheListener()),J).registerRoute(a),a}(t,new(De?ge:we)({cacheName:`app${e}`,plugins:[new Ae({purgeOnQuotaError:!0,maxEntries:20,maxAgeSeconds:604800})]}))))}();
